package it.unibo.distributedfrp.utils

/**
 * Utilities for the publish-subscribe communication pattern
 * for asynchronous communication.
 */
object Observables:
  /** A [[Subscription Subscription]] to the events of an [[Observable Observable]]. */
  trait Subscription:
    /**
     * Remove this [[Subscription Subscription]] from the subscriptions of
     * the owner [[Observable Observable]], cancelling the effects of the
     * call to [[Observable.subscribe subscribe]] that generated this
     * [[Subscription Subscrition]].
     */
    def unsubscribe(): Unit

  /**
   * A generator of events. It allows to subscribe to its events
   * in order to react to them when they are generated.
   *
   * @tparam E the type of events generated by this [[Observable Observable]].
   */
  trait Observable[E]:
    /**
     * The implementation of a [[Subscription Subscription]], used internally
     * to keep track of the behaviors registered by the subscribers of this
     * [[Observable Observable]].
     */
    protected case class Listener(owner: Observable[E], callback: E => Unit) extends Subscription:
      override def unsubscribe(): Unit = owner.unsubscribe(subscription = this)

    private var _subscriptions: Seq[Listener] = Seq()

    /**
     * Register the specified behavior to be executed each time this
     * [[Observable Observable]] generates a new event.
     *
     * @param consumer the specified behavior.
     * @return a new [[Subscription Subscription]] through which the
     *         user can cancel the registration of the specified behavior.
     */
    def subscribe(consumer: E => Unit): Subscription = synchronized {
      val subscription: Listener = Listener(owner = this, callback = consumer)
      this._subscriptions = this._subscriptions :+ subscription
      subscription
    }

    /** @return the [[Listener Listener]]s registered to this [[Observable Observable]]. */
    protected def subscriptions: Iterable[Listener] = synchronized {
      this._subscriptions
    }

    /** As [[Subscription.unsubscribe subscription.unsubscribe()]]. */
    private def unsubscribe(subscription: Subscription): Unit = synchronized {
      this._subscriptions = this._subscriptions.filter(_ != subscription)
    }

  /**
   * An [[Observable Observable]] that allows publishing new events to it.
   *
   * @tparam E the type of events generated by this [[Observable Observable]].
   */
  trait EventBus[E] extends Observable[E]:
    /**
     * Publish the specified event to this [[Observable Observable]],
     * making its subscribers react to it.
     *
     * @param event the specified event.
     */
    def publish(event: E): Unit = this.subscriptions.foreach(_.callback(event))
