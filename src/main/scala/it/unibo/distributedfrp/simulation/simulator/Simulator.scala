package it.unibo.distributedfrp.simulation.simulator

import it.unibo.distributedfrp.core.{ExportTree, Incarnation}
import it.unibo.distributedfrp.frp.FrpExtensions.{*, given}
import nz.sodium

import java.util.concurrent.Executors
import scala.concurrent.ExecutionContext

/**
 * A simulator capable of configuring simulations for a specific [[Incarnation]].
 */
trait Simulator[I <: Incarnation]:
  /** The [[Incarnation]] for which this [[Simulator]] is capable of configuring [[Simulation Simulation]]s. */
  val incarnation: I
  export incarnation.{*, given}

  /**
   * Configure a new [[Simulation Simulation]] for executing the specified [[Flow]].
   *
   * @param flow the specified [[incarnation.Flow Flow]].
   * @tparam A the type of results produced by the specified [[incarnation.Flow Flow]].
   * @return a new [[Simulation Simulation]] for executing the specified [[Flow]].
   */
  def simulation[A](flow: Flow[A]): Simulation[A]

  /**
   * A simulation that executes a [[Flow]], letting the user observe its execution.
   *
   * @tparam A the type of results produced by the [[incarnation.Flow Flow]].
   */
  @FunctionalInterface
  trait Simulation[A]:
    /** An export in this [[Simulation Simulation]]. */
    type Export = Simulator.this.incarnation.Export[A]
    /** A result in this [[Simulation Simulation]]. */
    type Result = A
    /**
     * The [[Export Export]] of a specific [[incarnation.Context Device]]
     * at a given time.
     */
    type IndividualExport = (DeviceId, Export)
    /** The [[Result Result]] computed by a specific [[incarnation.Context Device]] at a given time. */
    type IndividualResult = (DeviceId, Result)
    /**
     * The [[Export Export]]s of all the [[incarnation.Context Device]]s at a
     * given time.
     */
    type CollectiveExportMap = Map[DeviceId, Export]
    /** The [[Result Result]]s computed by all the [[incarnation.Context Device]]s at a given time. */
    type CollectiveResultMap = Map[DeviceId, Result]

    private val _execution: sodium.StreamSink[IndividualExport] = sodium.StreamSink[IndividualExport]()
    private def exportToResult: Conversion[Export, Result] = _.root
    private def individualExportToResult: Conversion[IndividualExport, IndividualResult] = _ -> _.root

    /**
     * Start this [[Simulation Simulation]].
     *
     * When this method is called, the [[run]] method of the concrete implementation of this
     * [[Simulation Simulation]] will be called and the [[sodium.Stream Stream]]s exposed by
     * this [[Simulation Simulation]] will start generating their corresponding events.
     *
     * The user should attach his listeners to the [[sodium.Stream Stream]]s exposed by this
     * [[Simulation Simulation]] before starting the simulation in order to prevent the loss of
     * events.
     *
     * @note this method should not and cannot be overridden. To change the starting behavior of a
     *       [[Simulation Simulation]], override the [[run]] method instead.
     */
    final def start(): Unit =
      val executor: ExecutionContext = ExecutionContext.fromExecutor(Executors.newCachedThreadPool())
      sodium.Transaction.run(() =>
        this.run().listen(executionEvent =>
          executor.execute(() => this._execution.send(executionEvent))
        )
      )

    /**
     * Execute this [[Simulation Simulation]] producing a [[sodium.Stream Stream]] of
     * computation steps.
     *
     * @return a new [[sodium.Stream]] of the computation steps of this [[Simulation Simulation]],
     *         generated as they are executed.
     * @note to implement a concrete type extending a [[Simulation Simulation]], it is sufficient
     *       to provide the implementation for this method.
     */
    protected def run(): sodium.Stream[IndividualExport]

    /**
     * @return the [[sodium.Stream Stream]] of the [[IndividualExport IndividualExport]]s
     *         generated by the [[incarnation.Context Device]]s as this [[Simulation Simulation]]
     *         is executed.
     */
    def exported: sodium.Stream[IndividualExport] = this._execution
    /**
     * @return the [[sodium.Stream Stream]] of the [[IndividualResult IndividualResult]]s
     *         generated by the [[incarnation.Context Device]]s as this [[Simulation Simulation]]
     *         is executed.
     */
    def computed: sodium.Stream[IndividualResult] = this.exported.map(individualExportToResult)

    /**
     * @param initialExport the specified initial [[Export Export]].
     * @param deviceId      the specified id.
     * @return the [[sodium.Cell Cell]] of the [[Export Export]]s generated by the [[Context Device]]
     *         with the specified id.
     *
     *         Before the [[Context Device]] produces its first [[Export Export]], the [[sodium.Cell Cell]]
     *         provides the specified initial [[Export Export]] as a placeholder.
     */
    def exportsOf(initialExport: => Export)(deviceId: DeviceId): sodium.Cell[Export] =
      this.exported.filter(_._1 == deviceId).map(_._2).holdLazy(sodium.Lazy(initialExport))

    /**
     * @param initialResult the specified initial [[Result Result]].
     * @param deviceId      the specified id.
     * @return the [[sodium.Cell Cell]] of the [[Result Result]]s generated by the [[Context Device]]
     *         with the specified id.
     *
     *         Before the [[Context Device]] produces its first [[Result Result]], the [[sodium.Cell Cell]]
     *         provides the specified initial [[Result Result]] as a placeholder.
     */
    def resultsOf(initialResult: => Result)(deviceId: DeviceId): sodium.Cell[Result] =
      this.exportsOf(ExportTree(initialResult))(deviceId).map(exportToResult)

    /**
     * @return the [[sodium.Cell Cell]] of the [[CollectiveExportMap CollectiveExportMap]]
     *         generated by collecting the [[Export Export]]s of all the [[incarnation.Context Device]]s
     *         as this [[Simulation Simulation]] is executed.
     */
    def collectiveExports: sodium.Cell[CollectiveExportMap] =
      this.exported.accumLazy(sodium.Lazy(Map()), (next, acc) => acc + next)

    /**
     * @return the [[sodium.Cell Cell]] of the [[CollectiveResultMap CollectiveResultMap]]
     *         generated by collecting the [[Result Result]]s of all the [[incarnation.Context Device]]s
     *         as this [[Simulation Simulation]] is executed.
     */
    def collectiveResults: sodium.Cell[CollectiveResultMap] =
      this.collectiveExports.map(_.map(individualExportToResult))

  /** Companion object of [[Simulation]]. */
  object Simulation:
    /**
     * Create a new [[Simulation Simulation]] with the specified behavior.
     *
     * @param behavior the specified behavior. The behavior of a simulation is a function
     *                 describing its execution logic and outputting its computation steps
     *                 as events into the provided [[sodium.StreamSink StreamSink]].
     * @tparam A the type of results produced by the [[incarnation.Flow Flow]] executed by
     *           the new [[Simulation Simulation]].
     * @return a new [[Simulation Simulation]] with the specified behavior.
     */
    def apply[A](behavior: sodium.StreamSink[(DeviceId, Export[A])] => Unit): Simulation[A] =
      new Simulation[A]:
        override def run(): sodium.Stream[IndividualExport] =
          val executionStream = sodium.StreamSink[IndividualExport]()
          behavior(executionStream)
          executionStream
